[
	{
		"summary": "What's GSAP?",
		"content": "<p>Greensock Animation Platform (GSAP) is a javascript library that allows you to animate your website. I really like animating the websites that I've built from scratch and GSAP makes it so easy to accomplish! The syntax is really simple which makes no learning curve at all. Other than that, it doesn't take up a lot of space to incorporate these techniques, which makes your web pages 100,000 times faster.</p><p>Usually, websites use a mixture of GSAP and three js. GSAP makes animating in three js simple, so you can actually edit 3D stuff. What's great is that three js is essentially an easier webGL, so it makes animating with GSAP really simple!</p>"
	},
	{
		"summary": "Install",
		"content": "<p>In the project, you have to <code>npm install gsap</code> (if you have Node.js installed) or you can use the CDN (content delivery network). In sveltekit, you have to put all of your GSAP code in a <code>$effect</code> rune that runs the code when mounted, $effect is displayed once on initial load. If you were to use a regular script tag, it would not work. All of the designs that are animated on this website are mostly from GSAP, but a lot of them are css too. I tend to think that these animations make the website look a lot better than a static website. GSAP is a great tool to use for any web developer. I highly recommend it!</p><p>You can install GSAP on any javascript framework you want to use! It works on Vue, React, Svelte, and Angular. GSAP uses integer values to edit the DOM, for the most part.. It's also good for vanilla JavaScript.</p>"
	},
	{
		"summary": "Syntax",
		"content": "<p>It is quite simple to use GSAP. You can use <code>gsap.to(\"element\", { variables })</code> to animate TO a state. You can use <code>gsap.from(\"element\", { variables })</code> to animate FROM a state. You can use <code>gsap.fromTo(\"element\", { variables }, { variables })</code> to animate FROM a state TO another state.</p><p>The complete syntax is as follows: <code>gsap.to(\"element\", { variables })</code>. You can use the following variables: duration, delay, ease, stagger, and onComplete. The duration is how long the animation will last. The delay is how long the animation will wait before starting. The ease is the easing function that you want to use. The stagger is how long the animation will wait before starting. The onComplete is the function that will run after the animation is complete.</p><div class=\"responsive-image\"><img src=\"/code/tweens.webp\" alt=\"GSAP syntax example\" style=\"aspect-ratio: 16/9; width: 100%; height: auto;\"></div>"
	},
	{
		"summary": "Variables",
		"content": "<p><strong>x, y, z</strong> - Control the position of an element along the x, y, and z axes.</p><p><strong>rotation</strong> - Rotates an element in degrees.</p><p><strong>scale</strong> - Scales an element uniformly on all axes.</p><p><strong>scaleX, scaleY, scaleZ</strong> - Scale an element along the x, y, and z axes individually.</p><p><strong>opacity</strong> - Controls the transparency of an element.</p><p><strong>width, height</strong> - Animates the width and height of an element.</p><p><strong>color, backgroundColor</strong> - Changes the color or background color of an element.</p><p><strong>borderRadius</strong> - Animates the border-radius property of an element.</p><p><strong>skewX, skewY</strong> - Skews an element along the x and y axes.</p><p><strong>rotationX, rotationY, rotationZ</strong> - Rotate an element in 3D space along the x, y, and z axes.</p><p><strong>duration</strong> - Specifies the duration of the animation.</p><p><strong>delay</strong> - Delays the start of the animation.</p><p><strong>repeat</strong> - Specifies how many times an animation should repeat.</p><p><strong>yoyo</strong> - When set to true, makes the animation reverse back to the starting point after completing.</p><p><strong>ease</strong> - Controls the easing of the animation (e.g: ease: 'power1.out').</p><p><strong>onStart</strong> - Callback function that fires when the animation starts.</p><p><strong>onComplete</strong> - Callback function that fires when the animation completes.</p><p><strong>onUpdate</strong> - Callback function that fires on each frame during the animation.</p><p><strong>onRepeat</strong> - Callback function that fires each time the animation repeats.</p><p><strong>paused</strong> - If true, the animation starts in a paused state.</p><p><strong>stagger</strong> - Staggers the start times of animations in an array or NodeList.</p><p><strong>scrub</strong> - Syncs animations with scroll position (used with ScrollTrigger).</p><p><strong>overwrite</strong> - Controls how existing tweens are overwritten (auto, none, all).</p><p><strong>immediateRender</strong> - Renders the tween immediately upon creation.</p><p><strong>keyframes</strong> - Defines multiple animation states within a single tween.</p><p><strong>lazy</strong> - Defers rendering to reduce startup performance cost.</p><p><strong>id</strong> - Assigns a unique identifier to the tween for later reference.</p><p><strong>autoAlpha</strong> - Combines opacity and visibility (hides an element when opacity reaches 0).</p><p><strong>kill</strong> - Kills the tween or timeline.</p><p><strong>timeScale</strong> - Adjusts the speed of the animation.</p><p><strong>progress</strong> - Sets or gets the progress of the animation.</p><p><strong>reverse</strong> - Reverses the animation.</p><p><strong>seek</strong> - Moves the playhead to a specific time or label.</p><p><strong>repeatDelay</strong> - Sets the delay between repeats.</p><p><strong>endTime</strong> - Gets the end time of the animation.</p>"
	},
	{
		"summary": "Easing",
		"content": "<p>Easing functions control the acceleration and deceleration of an animation, making movements appear more smooth and visually appealing. GSAP has a ton of easings. Here are some commonly used easing functions in GSAP:</p><br><ul><p><strong>power1.in</strong> - Starts slowly and accelerates towards the end.</p><p><strong>power1.out</strong> - Starts quickly and decelerates towards the end.</p><p><strong>power1.inOut</strong> - Combines both in and out easing for a smooth transition.</p><p><strong>elastic.out</strong> - Creates a spring-like effect, overshooting the target before settling.</p><p><strong>bounce.out</strong> - Simulates a bouncing effect as the animation reaches its target.</p><p><strong>back.in</strong> - Moves slightly backward before moving forward to the target.</p><p><strong>circ.inOut</strong> - Creates a circular motion for a smooth start and end.</p></ul><p>You can apply these easing functions by specifying the <code>ease</code> property in your animation. For example:</p><div class=\"responsive-image\"><img src=\"/code/default-easing.webp\" alt=\"GSAP easing example\" style=\"aspect-ratio: 16/9; width: 100%; height: auto;\"></div><div class=\"responsive-image\"><img src=\"/code/easing.webp\" alt=\"GSAP easing example\" style=\"aspect-ratio: 16/9; width: 100%; height: auto;\"></div><p>You can go to the <a href=\"https://greensock.com/ease-visualizer/\" target=\"_blank\" rel=\"noopener noreferrer\">GSAP Ease Visualizer</a> to see how each easing looks.</p>"
	}
]
